pipeline {
    agent any

    environment {
        // Docker Hub credentials
        DOCKER_HUB_REPO = 'your-dockerhub-username/your-repo-name'
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials-id' // Set Jenkins Docker Hub credentials ID here
        IMAGE_TAG = "${env.BUILD_ID}" // Unique tag for the Docker image (you can use commit hash instead)
        DOCKER_IMAGE = "${DOCKER_HUB_REPO}:${IMAGE_TAG}"
        CONTAINER_NAME = 'your-container-name' // Replace with your Docker container name
    }

    stages {
        stage('Checkout') {
            steps {
                // Pull the code from a private GitHub repository
                git branch: 'master', url: 'https://github.com/ltmichael52/HCMSIU.git', credentialsId: 'PAT_Jenkins'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub and push the image
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Deploy New Image Locally') {
            steps {
                script {
                    // Stop and remove the old container, pull the new image, and start a new container
                    sh """
                    docker pull ${DOCKER_IMAGE} &&
                    docker stop ${CONTAINER_NAME} || true &&
                    docker rm ${CONTAINER_NAME} || true &&
                    docker run -d --name ${CONTAINER_NAME} -p 80:80 ${DOCKER_IMAGE}
                    """
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images on Jenkins
            sh "docker rmi ${DOCKER_IMAGE} || true"
        }
    }
}
